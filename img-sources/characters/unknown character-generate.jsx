// List all export resolutionsvar RESOLUTIONS = [256,128,96,64];var TEMPLATE_NAME = 'unknown-character.psd';var OUTPUT_FOLDER = '../../www/img/characters';var FOLDER_SEPARATOR = '/';app.open(getTemplateFile());var doc = app.activeDocument;// Export parametersvar options = new ExportOptionsSaveForWeb();options.format = SaveDocumentType.PNG;options.PNG8 = false;options.transparency = true;options.optimized = true;    var nbExportedFiles = 0;exportUnknownCharacter();//doc.close (SaveOptions.DONOTSAVECHANGES);alert("Export finished successfully.\nUnknown character exported in "+nbExportedFiles+" files.");function exportUnknownCharacter() {    // Loop on resolution    var exportFolder = Folder(doc.path+FOLDER_SEPARATOR+OUTPUT_FOLDER);    if(!exportFolder.exists) {        exportFolder.create();     }     var exportFileNamePrefix = exportFolder.path + FOLDER_SEPARATOR + exportFolder.name + FOLDER_SEPARATOR + "Unknown_";    var exportFileNameSuffix = ".png";// alert(exportFile.path + "/" + exportFile.name);    for (var key in data = RESOLUTIONS){        var resolution = RESOLUTIONS[key];        var exportFileName = exportFileNamePrefix + resolution + exportFileNameSuffix;// alert(exportFileName);        exportBySize(resolution, exportFileName);    }}function exportBySize(size, fileName) {    // Save history state (for undo later)    var savedState = doc.activeHistoryState;    doc.resizeImage(null, UnitValue(size,"px"), null, ResampleMethod.BICUBIC);    doc.exportDocument(new File(fileName), ExportType.SAVEFORWEB, options);    nbExportedFiles++;        // Undo resize    doc.activeHistoryState = savedState;}function getTemplateFile() {    var templatePath =  getFileDirectory($.fileName) + FOLDER_SEPARATOR+ TEMPLATE_NAME ;    return new File(templatePath);}function getFileDirectory(filePath) {	return filePath.substring(0, filePath.lastIndexOf(FOLDER_SEPARATOR));}