// List all export resolutionsvar resolutions = [300,100,50];// Export parametersvar options = new ExportOptionsSaveForWeb();options.format = SaveDocumentType.PNG;options.PNG8 = false;options.transparency = true;options.optimized = true;    // TODO Use app.pathvar templateFile = new File("/Users/Jibidus/Documents/Workspace/mobile/kaamelott/images/Character-template.psd");app.open(templateFile);var doc = app.activeDocument;var layers = doc.layerSets.getByName("Characters").layers;// Make all layers not visiblefor (var i = 0; i< layers.length; i++) {    var layer = layers[i];    layer.visible = false;}var nbExportedFiles = 0;// Export character one by onefor (var i = 0; i< layers.length; i++) {    var layer = layers[i];    layer.visible = true;    exportCharacter(layer.name);    layer.visible = false;}function exportCharacter(name) {    // Loop on resolution    var exportFolder = Folder(doc.path+"/export");    if(!exportFolder.exists) {        exportFolder.create();     }     var exportFileNamePrefix = exportFolder.path + "/" + exportFolder.name + "/" + name + "_";    var exportFileNameSuffix = ".png";//    alert(exportFile.path + "/" + exportFile.name);    for (var key in data = resolutions){        var resolution = resolutions[key];        var exportFileName = exportFileNamePrefix + resolution + exportFileNameSuffix;        exportBySize(resolution, exportFileName);    }}function exportBySize(size, fileName) {    // Save history state (for undo later)    var savedState = doc.activeHistoryState;    doc.resizeImage(null, UnitValue(size,"px"), null, ResampleMethod.BICUBIC);    doc.exportDocument(new File(fileName), ExportType.SAVEFORWEB, options);    nbExportedFiles++;        // Undo resize    doc.activeHistoryState = savedState;}//doc.close (SaveOptions.DONOTSAVECHANGES);alert(layers.length + " characters exported in "+nbExportedFiles+" files.");